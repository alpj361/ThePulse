"use client"

import { useState, useEffect } from "react"
import { Card, CardContent } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import {
  Search,
  TrendingUp,
  PieChart,
  Globe,
  Activity,
  Brain,
  Zap,
  ArrowRight,
  Eye,
  Clock,
  ChevronRight,
  ChevronDown,
} from "lucide-react"
import { motion } from "framer-motion"
import { ResponsivePie } from "@nivo/pie"
import { ResponsiveBar } from "@nivo/bar"
import { ResponsiveLine } from "@nivo/line"

function Bubble({ x, y, size, color }: { x: number; y: number; size: number; color: string }) {
  return (
    <motion.circle
      cx={x}
      cy={y}
      r={size}
      fill={color}
      initial={{ opacity: 0, scale: 0 }}
      animate={{
        opacity: [0.7, 0.3, 0.7],
        scale: [1, 1.2, 1],
        x: x + Math.random() * 100 - 50,
        y: y + Math.random() * 100 - 50,
      }}
      transition={{
        duration: 5 + Math.random() * 10,
        repeat: Number.POSITIVE_INFINITY,
        repeatType: "reverse",
      }}
    />
  )
}

function FloatingBubbles() {
  const [bubbles, setBubbles] = useState<Array<{ id: number; x: number; y: number; size: number; color: string }>>([])

  useEffect(() => {
    const newBubbles = Array.from({ length: 30 }, (_, i) => ({
      id: i,
      x: Math.random() * (typeof window !== "undefined" ? window.innerWidth : 1200),
      y: Math.random() * (typeof window !== "undefined" ? window.innerHeight : 800),
      size: Math.random() * 15 + 3,
      color: `rgba(139, 92, 246, ${Math.random() * 0.2 + 0.1})`,
    }))
    setBubbles(newBubbles)
  }, [])

  return (
    <div className="absolute inset-0 pointer-events-none">
      <svg className="w-full h-full">
        <title>Floating Bubbles</title>
        {bubbles.map((bubble) => (
          <Bubble key={bubble.id} {...bubble} />
        ))}
      </svg>
    </div>
  )
}

// Datos transformados correctamente para Nivo
const sampleData = {
  temas_relevantes: [
    { tema: "Política Nacional", value: 85, color: "#8B5CF6" },
    { tema: "Economía Regional", value: 67, color: "#EC4899" },
    { tema: "Relaciones Int.", value: 54, color: "#F59E0B" },
    { tema: "Innovación Tech", value: 42, color: "#10B981" },
    { tema: "Cultura", value: 38, color: "#EF4444" },
    { tema: "Salud", value: 32, color: "#6366F1" },
  ],
  distribucion_categorias: [
    { id: "Política", label: "Política", value: 35, color: "#6366F1" },
    { id: "Economía", label: "Economía", value: 28, color: "#8B5CF6" },
    { id: "Internacional", label: "Internacional", value: 17, color: "#EC4899" },
    { id: "Tecnología", label: "Tecnología", value: 12, color: "#F59E0B" },
    { id: "Cultura", label: "Cultura", value: 8, color: "#10B981" },
  ],
  regiones: [
    { region: "Capital", value: 48, color: "#8B5CF6" },
    { region: "Metropolitana", value: 35, color: "#EC4899" },
    { region: "Occidente", value: 25, color: "#F59E0B" },
    { region: "Oriente", value: 18, color: "#10B981" },
    { region: "Sur", value: 12, color: "#EF4444" },
  ],
  evolucion_temporal: [
    {
      id: "Actual",
      color: "#8B5CF6",
      data: [
        { x: "Ene", y: 15 },
        { x: "Feb", y: 25 },
        { x: "Mar", y: 35 },
        { x: "Abr", y: 45 },
        { x: "May", y: 42 },
        { x: "Jun", y: 55 },
      ],
    },
    {
      id: "Proyección",
      color: "#EC4899",
      data: [
        { x: "Ene", y: 20 },
        { x: "Feb", y: 28 },
        { x: "Mar", y: 38 },
        { x: "Abr", y: 48 },
        { x: "May", y: 45 },
        { x: "Jun", y: 58 },
      ],
    },
  ],
}

const questions = [
  {
    id: 1,
    title: "Temas Trending",
    subtitle: "¿Qué temas dominan la conversación?",
    description: "Análisis de tendencias emergentes y temas de mayor impacto social",
    icon: <TrendingUp className="w-6 h-6" />,
    dataKey: "temas_relevantes",
    chartType: "bar",
    gradient: "from-violet-500 to-purple-600",
    bgGradient: "from-violet-50 to-purple-50",
    accentColor: "#8B5CF6",
  },
  {
    id: 2,
    title: "Distribución",
    subtitle: "¿Cómo se segmentan las categorías?",
    description: "Distribución porcentual y análisis de participación por sectores",
    icon: <PieChart className="w-6 h-6" />,
    dataKey: "distribucion_categorias",
    chartType: "pie",
    gradient: "from-pink-500 to-rose-600",
    bgGradient: "from-pink-50 to-rose-50",
    accentColor: "#EC4899",
  },
  {
    id: 3,
    title: "Geografía",
    subtitle: "¿Dónde se concentra la actividad?",
    description: "Mapeo geográfico de menciones y engagement regional",
    icon: <Globe className="w-6 h-6" />,
    dataKey: "regiones",
    chartType: "bar",
    gradient: "from-emerald-500 to-teal-600",
    bgGradient: "from-emerald-50 to-teal-50",
    accentColor: "#10B981",
  },
  {
    id: 4,
    title: "Evolución",
    subtitle: "¿Cuál es la tendencia temporal?",
    description: "Análisis de evolución temporal y proyecciones futuras",
    icon: <Activity className="w-6 h-6" />,
    dataKey: "evolucion_temporal",
    chartType: "line",
    gradient: "from-amber-500 to-orange-600",
    bgGradient: "from-amber-50 to-orange-50",
    accentColor: "#F59E0B",
  },
]

// Componente de gráfico ultra moderno con Nivo
const UltraModernChart = ({ data, type, accentColor, height = 240 }: any) => {
  const commonTheme = {
    background: "transparent",
    text: {
      fontSize: 11,
      fill: "#64748b",
      fontFamily: "Inter, system-ui, sans-serif",
    },
    axis: {
      domain: {
        line: {
          stroke: "#f1f5f9",
          strokeWidth: 1,
        },
      },
      legend: {
        text: {
          fontSize: 12,
          fill: "#64748b",
          fontFamily: "Inter, system-ui, sans-serif",
        },
      },
      ticks: {
        line: {
          stroke: "#f1f5f9",
          strokeWidth: 1,
        },
        text: {
          fontSize: 11,
          fill: "#64748b",
          fontFamily: "Inter, system-ui, sans-serif",
        },
      },
    },
    grid: {
      line: {
        stroke: "#f1f5f9",
        strokeWidth: 1,
      },
    },
    tooltip: {
      container: {
        background: "rgba(255, 255, 255, 0.95)",
        color: "#1e293b",
        fontSize: "12px",
        borderRadius: "12px",
        boxShadow: "0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)",
        border: "none",
        backdropFilter: "blur(10px)",
        fontFamily: "Inter, system-ui, sans-serif",
      },
    },
  }

  if (type === "bar") {
    // Determinar la clave correcta para indexBy
    const indexKey = data[0]?.tema ? "tema" : "region"

    return (
      <div style={{ height }}>
        <ResponsiveBar
          data={data}
          keys={["value"]}
          indexBy={indexKey}
          margin={{ top: 20, right: 20, bottom: 60, left: 60 }}
          padding={0.3}
          valueScale={{ type: "linear" }}
          indexScale={{ type: "band", round: true }}
          colors={{ datum: "data.color" }}
          borderRadius={8}
          borderWidth={2}
          borderColor={{ from: "color", modifiers: [["darker", 0.3]] }}
          axisTop={null}
          axisRight={null}
          axisBottom={{
            tickSize: 5,
            tickPadding: 5,
            tickRotation: -45,
            legend: indexKey === "tema" ? "Temas" : "Regiones",
            legendPosition: "middle",
            legendOffset: 50,
          }}
          axisLeft={{
            tickSize: 5,
            tickPadding: 5,
            tickRotation: 0,
            legend: "Valor",
            legendPosition: "middle",
            legendOffset: -50,
          }}
          labelSkipWidth={12}
          labelSkipHeight={12}
          labelTextColor={{ from: "color", modifiers: [["darker", 1.6]] }}
          theme={commonTheme}
          motionConfig="gentle"
          animate={true}
          enableGridY={true}
          enableGridX={false}
        />
      </div>
    )
  }

  if (type === "pie") {
    return (
      <div style={{ height }}>
        <ResponsivePie
          data={data}
          margin={{ top: 20, right: 20, bottom: 20, left: 20 }}
          innerRadius={0.5}
          padAngle={3}
          cornerRadius={8}
          activeOuterRadiusOffset={12}
          colors={{ datum: "data.color" }}
          borderWidth={3}
          borderColor={{ from: "color", modifiers: [["darker", 0.2]] }}
          arcLinkLabelsSkipAngle={10}
          arcLinkLabelsTextColor="#64748b"
          arcLinkLabelsThickness={3}
          arcLinkLabelsColor={{ from: "color", modifiers: [["darker", 0.3]] }}
          arcLabelsSkipAngle={10}
          arcLabelsTextColor={{ from: "color", modifiers: [["darker", 2]] }}
          theme={commonTheme}
          motionConfig="gentle"
          transitionMode="startAngle"
          animate={true}
          enableArcLinkLabels={true}
          enableArcLabels={true}
        />
      </div>
    )
  }

  if (type === "line") {
    return (
      <div style={{ height }}>
        <ResponsiveLine
          data={data}
          margin={{ top: 20, right: 20, bottom: 60, left: 60 }}
          xScale={{ type: "point" }}
          yScale={{ type: "linear", min: "auto", max: "auto", stacked: false, reverse: false }}
          yFormat=" >-.0f"
          curve="catmullRom"
          axisTop={null}
          axisRight={null}
          axisBottom={{
            tickSize: 5,
            tickPadding: 5,
            tickRotation: 0,
            legend: "Período",
            legendOffset: 50,
            legendPosition: "middle",
          }}
          axisLeft={{
            tickSize: 5,
            tickPadding: 5,
            tickRotation: 0,
            legend: "Valor",
            legendOffset: -50,
            legendPosition: "middle",
          }}
          pointSize={10}
          pointColor={{ theme: "background" }}
          pointBorderWidth={3}
          pointBorderColor={{ from: "serieColor" }}
          pointLabelYOffset={-12}
          enableArea={true}
          areaOpacity={0.15}
          useMesh={true}
          theme={commonTheme}
          colors={{ datum: "color" }}
          motionConfig="gentle"
          animate={true}
          enableGridX={false}
          enableGridY={true}
          lineWidth={4}
        />
      </div>
    )
  }

  return null
}

// Componente principal ultra moderno
const UltraModernSondeos = () => {
  const [searchQuery, setSearchQuery] = useState("desarrollo económico")
  const [selectedContext, setSelectedContext] = useState<string[]>(["tendencias"])
  const [isAnalyzing, setIsAnalyzing] = useState(false)
  const [progress, setProgress] = useState(0)
  const [showResults, setShowResults] = useState(true)
  const [hoveredCard, setHoveredCard] = useState<number | null>(null)

  const handleAnalyze = () => {
    setIsAnalyzing(true)
    setProgress(0)
    setShowResults(false)

    const interval = setInterval(() => {
      setProgress((prev) => {
        if (prev >= 100) {
          clearInterval(interval)
          setIsAnalyzing(false)
          setShowResults(true)
          return 100
        }
        return prev + 8
      })
    }, 150)
  }

  const getInsightText = (questionId: number) => {
    const insights = {
      1: "Los temas de política nacional lideran con 85% de engagement, mostrando un crecimiento del 12% en las últimas semanas. La innovación tecnológica emerge como el sector de mayor crecimiento (+22%).",
      2: "La conversación se concentra principalmente en política (35%) y economía (28%), mientras que tecnología (12%) muestra potencial de expansión significativo en los próximos meses.",
      3: "Ciudad Capital concentra el 48% de la actividad, con tendencia al alza. La descentralización hacia regiones como Occidente muestra oportunidades de crecimiento emergentes.",
      4: "Tendencia ascendente sostenida con proyección optimista. Los datos actuales superan objetivos en 3 de los últimos 4 períodos, indicando momentum positivo.",
    }
    return insights[questionId as keyof typeof insights] || ""
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-white to-slate-100 relative">
      <FloatingBubbles />

      {/* Fondo decorativo */}
      <div className="fixed inset-0 overflow-hidden pointer-events-none">
        <div className="absolute -top-40 -right-40 w-80 h-80 bg-gradient-to-br from-violet-400/20 to-purple-600/20 rounded-full blur-3xl"></div>
        <div className="absolute -bottom-40 -left-40 w-80 h-80 bg-gradient-to-tr from-emerald-400/20 to-teal-600/20 rounded-full blur-3xl"></div>
      </div>

      <div className="relative max-w-7xl mx-auto p-6 space-y-12">
        {/* Header ultra moderno */}
        <div className="text-center space-y-6 py-12">
          <div className="space-y-4">
            <h1 className="text-5xl font-bold bg-gradient-to-r from-slate-900 via-violet-900 to-slate-900 bg-clip-text text-transparent">
              Sondeos
            </h1>
            <p className="text-xl text-slate-600 max-w-3xl mx-auto leading-relaxed">
              Descubre insights profundos y tendencias emergentes con análisis impulsado por inteligencia artificial
            </p>
          </div>
        </div>

        {/* Barra de búsqueda ultra moderna */}
        <Card className="border-0 shadow-2xl bg-white/80 backdrop-blur-xl">
          <CardContent className="p-8">
            <div className="flex flex-col lg:flex-row gap-6 items-end">
              <div className="flex-1 space-y-3">
                <label className="text-sm font-semibold text-slate-700 flex items-center gap-2">
                  <Brain className="w-4 h-4" />
                  ¿Qué tema quieres explorar?
                </label>
                <Input
                  placeholder="Ej: desarrollo sostenible, políticas públicas, innovación digital..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="h-14 text-lg border-2 border-slate-200 focus:border-violet-500 transition-all duration-300 bg-white/50 backdrop-blur-sm"
                />
              </div>

              <div className="space-y-3">
                <label className="text-sm font-semibold text-slate-700">Fuentes de Datos (Múltiple)</label>
                <div className="relative">
                  <div className="w-52 h-14 border-2 bg-white/50 backdrop-blur-sm rounded-md flex items-center justify-between px-3 cursor-pointer group hover:border-violet-300 transition-colors">
                    <div className="flex flex-wrap gap-1 flex-1 overflow-hidden">
                      {selectedContext.length === 0 ? (
                        <span className="text-slate-500 text-sm">Seleccionar fuentes...</span>
                      ) : (
                        selectedContext.map((context) => (
                          <Badge
                            key={context}
                            variant="secondary"
                            className="bg-violet-100 text-violet-700 text-xs px-2 py-1 flex items-center gap-1"
                          >
                            {context === "tendencias" ? "🔥" : context === "noticias" ? "📰" : "📚"}
                            <button
                              onClick={(e) => {
                                e.stopPropagation()
                                setSelectedContext((prev) => prev.filter((c) => c !== context))
                              }}
                              className="ml-1 hover:text-red-500 text-xs font-bold"
                            >
                              ×
                            </button>
                          </Badge>
                        ))
                      )}
                    </div>
                    <ChevronDown className="w-4 h-4 text-slate-500 group-hover:text-violet-500 transition-colors" />
                  </div>

                  <div className="absolute top-full left-0 right-0 mt-1 bg-white/95 backdrop-blur-sm border border-slate-200 rounded-md shadow-lg z-50 overflow-hidden">
                    {[
                      { value: "tendencias", label: "🔥 Tendencias Sociales" },
                      { value: "noticias", label: "📰 Medios de Comunicación" },
                      { value: "codex", label: "📚 Base de Conocimiento" },
                    ].map((option) => (
                      <div
                        key={option.value}
                        className="px-3 py-3 hover:bg-violet-50 cursor-pointer flex items-center gap-3 transition-colors"
                        onClick={() => {
                          if (selectedContext.includes(option.value)) {
                            setSelectedContext((prev) => prev.filter((c) => c !== option.value))
                          } else {
                            setSelectedContext((prev) => [...prev, option.value])
                          }
                        }}
                      >
                        <input
                          type="checkbox"
                          checked={selectedContext.includes(option.value)}
                          onChange={() => {}}
                          className="rounded border-slate-300 text-violet-600 focus:ring-violet-500"
                        />
                        <span className="text-sm font-medium">{option.label}</span>
                      </div>
                    ))}
                  </div>
                </div>
              </div>

              <Button
                onClick={handleAnalyze}
                disabled={isAnalyzing || !searchQuery.trim()}
                className="h-14 px-8 bg-gradient-to-r from-violet-600 to-purple-600 hover:from-violet-700 hover:to-purple-700 text-white font-semibold shadow-lg hover:shadow-xl transition-all duration-300"
              >
                {isAnalyzing ? (
                  <>
                    <div className="w-5 h-5 mr-3 border-2 border-white/30 border-t-white rounded-full animate-spin"></div>
                    Analizando...
                  </>
                ) : (
                  <>
                    <Search className="w-5 h-5 mr-3" />
                    Iniciar Sondeo
                  </>
                )}
              </Button>
            </div>

            {/* Barra de progreso mejorada */}
            {isAnalyzing && (
              <div className="mt-6 space-y-3">
                <div className="flex justify-between items-center">
                  <span className="text-sm font-medium text-slate-600 flex items-center gap-2">
                    <Brain className="w-4 h-4 animate-pulse" />
                    Procesando con IA avanzada...
                  </span>
                  <span className="text-sm font-bold text-violet-600">{progress}%</span>
                </div>
                <Progress value={progress} className="h-3 bg-slate-200" />
              </div>
            )}
          </CardContent>
        </Card>

        {/* Análisis generado - Solo aparece después de sondear */}
        {showResults && (
          <Card className="border-0 shadow-xl bg-gradient-to-r from-blue-50 to-indigo-50 overflow-hidden">
            <CardContent className="p-8">
              <div className="flex items-center gap-6 mb-6">
                <div className="p-4 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-2xl shadow-lg">
                  <Brain className="w-8 h-8 text-white" />
                </div>
                <div className="flex-1">
                  <h3 className="text-2xl font-bold text-slate-900 mb-2">Análisis Generado por IA</h3>
                  <p className="text-slate-600 text-sm">
                    Basado en:{" "}
                    {selectedContext
                      .map((ctx) =>
                        ctx === "tendencias" ? "🔥 Tendencias" : ctx === "noticias" ? "📰 Noticias" : "📚 Codex",
                      )
                      .join(", ")}
                  </p>
                </div>
                <Badge variant="secondary" className="px-3 py-1 bg-green-100 text-green-700">
                  <div className="w-2 h-2 bg-green-500 rounded-full mr-2 animate-pulse"></div>
                  Completado
                </Badge>
              </div>

              <div className="bg-white/80 backdrop-blur-sm rounded-xl p-6 border border-white/50 shadow-sm">
                <div className="flex items-center gap-2 mb-4">
                  <Eye className="w-5 h-5 text-blue-600" />
                  <span className="font-semibold text-slate-700">Resumen Ejecutivo</span>
                </div>
                <p className="text-slate-700 leading-relaxed mb-4">
                  El análisis de "{searchQuery}" revela patrones significativos en las fuentes seleccionadas. Los datos
                  muestran una concentración del 63% de la actividad en temas político-económicos, con un crecimiento
                  sostenido del 18% en engagement durante las últimas 4 semanas.
                </p>
                <p className="text-slate-700 leading-relaxed">
                  Las proyecciones indican una tendencia ascendente, especialmente en innovación tecnológica (+22%) y
                  desarrollo sostenible (+15%), sugiriendo oportunidades estratégicas en estos sectores para los
                  próximos 6 meses.
                </p>
              </div>
            </CardContent>
          </Card>
        )}

        {/* Grid 2x2 de preguntas ultra moderno */}
        {showResults && (
          <div className="space-y-8">
            <div className="flex items-center justify-between">
              <div>
                <h2 className="text-3xl font-bold text-slate-900">Análisis Completo</h2>
                <p className="text-slate-600 mt-1">Visualizaciones interactivas con gráficos de última generación</p>
              </div>
              <Badge variant="secondary" className="px-4 py-2 bg-green-100 text-green-700 border-green-200">
                <div className="w-2 h-2 bg-green-500 rounded-full mr-2 animate-pulse"></div>
                Actualizado ahora
              </Badge>
            </div>

            {/* Grid 2x2 */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
              {questions.map((question) => (
                <Card
                  key={question.id}
                  className={`group overflow-hidden border-0 shadow-xl hover:shadow-2xl transition-all duration-500 transform hover:-translate-y-2 bg-gradient-to-br ${question.bgGradient} backdrop-blur-sm`}
                  onMouseEnter={() => setHoveredCard(question.id)}
                  onMouseLeave={() => setHoveredCard(null)}
                >
                  {/* Header de la pregunta */}
                  <div className={`p-6 bg-gradient-to-r ${question.gradient} text-white relative overflow-hidden`}>
                    <div className="absolute inset-0 bg-black/10 group-hover:bg-black/5 transition-colors duration-300"></div>
                    <div className="relative z-10">
                      <div className="flex items-center justify-between mb-4">
                        <div className="flex items-center gap-3">
                          <div className="p-2 bg-white/20 rounded-lg backdrop-blur-sm">{question.icon}</div>
                          <div>
                            <h3 className="text-xl font-bold">{question.title}</h3>
                            <p className="text-white/80 text-sm">{question.subtitle}</p>
                          </div>
                        </div>
                        <div className="text-3xl font-bold opacity-20">{String(question.id).padStart(2, "0")}</div>
                      </div>
                      <p className="text-white/90 text-sm leading-relaxed">{question.description}</p>
                    </div>
                  </div>

                  <CardContent className="p-6 space-y-6">
                    {/* Gráfico moderno */}
                    <div className="bg-white/60 backdrop-blur-sm rounded-xl p-4 shadow-inner">
                      <UltraModernChart
                        data={sampleData[question.dataKey as keyof typeof sampleData]}
                        type={question.chartType}
                        accentColor={question.accentColor}
                        height={280}
                      />
                    </div>

                    {/* Insight */}
                    <div className="space-y-4">
                      <div className="flex items-center gap-2">
                        <Eye className="w-5 h-5 text-slate-500" />
                        <span className="font-semibold text-slate-700">Insight Principal</span>
                      </div>

                      <div className="p-5 bg-white/80 backdrop-blur-sm rounded-xl border border-white/50 shadow-sm">
                        <p className="text-slate-700 leading-relaxed">{getInsightText(question.id)}</p>
                      </div>

                      {/* Métricas rápidas */}
                      <div className="flex gap-3">
                        <div className="flex-1 p-3 bg-white/60 backdrop-blur-sm rounded-lg text-center">
                          <div className="text-2xl font-bold text-slate-900">
                            {question.id === 1
                              ? "85%"
                              : question.id === 2
                                ? "35%"
                                : question.id === 3
                                  ? "48%"
                                  : "↗ 22%"}
                          </div>
                          <div className="text-xs text-slate-600 font-medium">
                            {question.id === 1
                              ? "Engagement"
                              : question.id === 2
                                ? "Política"
                                : question.id === 3
                                  ? "Capital"
                                  : "Crecimiento"}
                          </div>
                        </div>
                        <div className="flex-1 p-3 bg-white/60 backdrop-blur-sm rounded-lg text-center">
                          <div className="text-2xl font-bold text-slate-900">
                            {question.id === 1
                              ? "+12%"
                              : question.id === 2
                                ? "5 Cat"
                                : question.id === 3
                                  ? "5 Reg"
                                  : "6 Meses"}
                          </div>
                          <div className="text-xs text-slate-600 font-medium">
                            {question.id === 1
                              ? "Crecimiento"
                              : question.id === 2
                                ? "Categorías"
                                : question.id === 3
                                  ? "Regiones"
                                  : "Período"}
                          </div>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>
        )}

        {/* Historial ultra moderno */}
        <Card className="border-0 shadow-2xl bg-white/80 backdrop-blur-xl">
          <CardContent className="p-8">
            <div className="flex items-center justify-between mb-8">
              <div>
                <h3 className="text-2xl font-bold text-slate-900">Historial de Análisis</h3>
                <p className="text-slate-600 mt-1">Tus sondeos anteriores y tendencias guardadas</p>
              </div>
              <Button variant="outline" className="bg-white/50 backdrop-blur-sm border-slate-200">
                Ver todos
                <ArrowRight className="w-4 h-4 ml-2" />
              </Button>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              {[
                { title: "Desarrollo Sostenible", context: "Tendencias", time: "2h", mentions: "2.1K" },
                { title: "Políticas Públicas", context: "Noticias", time: "1d", mentions: "1.8K" },
                { title: "Innovación Digital", context: "Codex", time: "3d", mentions: "956" },
              ].map((item, idx) => (
                <Card
                  key={idx}
                  className="group border border-slate-200 hover:border-violet-300 transition-all duration-300 hover:shadow-lg bg-white/60 backdrop-blur-sm"
                >
                  <CardContent className="p-5">
                    <div className="space-y-4">
                      <div className="flex items-center justify-between">
                        <Badge variant="secondary" className="bg-violet-100 text-violet-700 border-violet-200">
                          {item.context}
                        </Badge>
                        <span className="text-xs text-slate-500 flex items-center gap-1">
                          <Clock className="w-3 h-3" />
                          {item.time}
                        </span>
                      </div>

                      <h4 className="font-semibold text-slate-900 group-hover:text-violet-700 transition-colors">
                        {item.title}
                      </h4>

                      <div className="flex items-center justify-between pt-3 border-t border-slate-100">
                        <span className="text-sm text-slate-600">{item.mentions} menciones</span>
                        <Button
                          variant="ghost"
                          size="sm"
                          className="h-8 px-3 text-xs hover:bg-violet-50 hover:text-violet-700"
                        >
                          Abrir
                          <ChevronRight className="w-3 h-3 ml-1" />
                        </Button>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </CardContent>
        </Card>

        {/* Acciones finales */}
        <div className="flex flex-col sm:flex-row gap-6 justify-center items-center py-12">
          <Button
            size="lg"
            className="bg-gradient-to-r from-violet-600 to-purple-600 hover:from-violet-700 hover:to-purple-700 shadow-xl hover:shadow-2xl transition-all duration-300 px-8 py-4"
          >
            <Zap className="w-5 h-5 mr-3" />
            Guardar Cambios
          </Button>
        </div>
      </div>
    </div>
  )
}

export default UltraModernSondeos
