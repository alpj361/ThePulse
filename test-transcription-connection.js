const EXTRACTORW_URL = process.env.VITE_EXTRACTORW_API_URL || 'http://localhost:3009';

console.log('üîç DIAGN√ìSTICO DE CONECTIVIDAD - SISTEMA DE TRANSCRIPCI√ìN');
console.log('=' .repeat(60));

async function testConnection() {
  try {
    console.log(`\nüì° Probando conectividad con: ${EXTRACTORW_URL}`);
    
    // Test 1: Status b√°sico
    console.log('\n1Ô∏è‚É£ Verificando endpoint de status...');
    try {
      const statusResponse = await fetch(`${EXTRACTORW_URL}/api/status`);
      if (statusResponse.ok) {
        const statusData = await statusResponse.json();
        console.log('‚úÖ Servidor ExtractorW est√° online');
        console.log(`   Status: ${statusData.status}`);
        console.log(`   Timestamp: ${statusData.timestamp}`);
      } else {
        console.log(`‚ùå Error en status: ${statusResponse.status} ${statusResponse.statusText}`);
      }
    } catch (error) {
      console.log(`‚ùå No se puede conectar al servidor: ${error.message}`);
      console.log('üí° Aseg√∫rate de que ExtractorW est√© corriendo en el puerto 3009');
      return;
    }

    // Test 2: Formatos soportados
    console.log('\n2Ô∏è‚É£ Verificando formatos soportados...');
    try {
      const formatsResponse = await fetch(`${EXTRACTORW_URL}/api/transcription/supported-formats`);
      if (formatsResponse.ok) {
        const formatsData = await formatsResponse.json();
        console.log('‚úÖ Endpoint de formatos funciona');
        console.log(`   Audio: ${formatsData.data.audio.join(', ')}`);
        console.log(`   Video: ${formatsData.data.video.join(', ')}`);
      } else {
        console.log(`‚ùå Error en formatos: ${formatsResponse.status} ${formatsResponse.statusText}`);
      }
    } catch (error) {
      console.log(`‚ùå Error obteniendo formatos: ${error.message}`);
    }

    // Test 3: Endpoint protegido (sin token)
    console.log('\n3Ô∏è‚É£ Verificando endpoint protegido (sin token)...');
    try {
      const protectedResponse = await fetch(`${EXTRACTORW_URL}/api/transcription/cost`);
      if (protectedResponse.status === 401) {
        console.log('‚úÖ Endpoint protegido funciona correctamente (401 esperado sin token)');
      } else {
        console.log(`‚ö†Ô∏è Respuesta inesperada: ${protectedResponse.status} ${protectedResponse.statusText}`);
      }
    } catch (error) {
      console.log(`‚ùå Error en endpoint protegido: ${error.message}`);
    }

    // Test 4: CORS
    console.log('\n4Ô∏è‚É£ Verificando configuraci√≥n CORS...');
    try {
      const corsResponse = await fetch(`${EXTRACTORW_URL}/api/transcription/supported-formats`, {
        method: 'OPTIONS'
      });
      console.log(`‚úÖ CORS response: ${corsResponse.status}`);
      const corsHeaders = corsResponse.headers.get('Access-Control-Allow-Origin');
      if (corsHeaders) {
        console.log(`   CORS headers: ${corsHeaders}`);
      } else {
        console.log('‚ö†Ô∏è No se encontraron headers CORS');
      }
    } catch (error) {
      console.log(`‚ùå Error verificando CORS: ${error.message}`);
    }

    console.log('\nüéØ RECOMENDACIONES:');
    console.log('‚îÄ'.repeat(50));
    console.log('‚Ä¢ Si el servidor no responde: cd ExtractorW && npm run dev');
    console.log('‚Ä¢ Verificar archivo .env en PulseJ: VITE_EXTRACTORW_API_URL=http://localhost:3009');
    console.log('‚Ä¢ Verificar que el puerto 3009 no est√© bloqueado');
    console.log('‚Ä¢ Asegurar que FFmpeg est√© instalado para transcripciones de video');

  } catch (error) {
    console.error('\n‚ùå Error general en diagn√≥stico:', error);
  }
}

// Simulaci√≥n de Token para pruebas
const simulateTokenTest = () => {
  console.log('\n5Ô∏è‚É£ Informaci√≥n sobre autenticaci√≥n...');
  console.log('Token actual en localStorage:', 
    typeof window !== 'undefined' && localStorage.getItem('token') ? 
    '‚úÖ Token presente' : '‚ùå Token faltante'
  );
  console.log('üí° El token se debe obtener del proceso de login en PulseJ');
};

// Ejecutar diagn√≥stico
testConnection().then(() => {
  if (typeof window !== 'undefined') {
    simulateTokenTest();
  }
  console.log('\n‚ú® Diagn√≥stico completado\n');
}); 